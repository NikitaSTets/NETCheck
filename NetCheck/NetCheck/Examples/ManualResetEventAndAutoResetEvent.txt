using System;
using System.Threading;

namespace NetCheck
{
    internal class Program
    {
        //private static readonly ManualResetEvent Mre = new ManualResetEvent(false);
        private static readonly AutoResetEvent Mre = new AutoResetEvent(false);

        private static void Main()
        {
            Console.WriteLine("\nStart 3 named threads that block on a ManualResetEvent:\n");

            for (var i = 0; i <= 2; i++)
            {
                var thread = new Thread(ThreadProc)
                {
                    Name = "Thread_" + i
                };

                thread.Start();
            }

            Thread.Sleep(500);
            Console.ReadLine();

            Mre.Set();

            Thread.Sleep(500);
            Console.ReadLine();

            for (var i = 3; i <= 4; i++)
            {
                var thread = new Thread(ThreadProc)
                {
                    Name = "Thread_" + i
                };
                thread.Start();
            }

            Thread.Sleep(500);
            Console.ReadLine();

            Mre.Reset();

            // Start a thread that waits on the ManualResetEvent.
            var thread5 = new Thread(ThreadProc)
            {
                Name = "Thread_5"
            };
            thread5.Start();

            Thread.Sleep(500);
            Console.ReadLine();

            Mre.Set();
        }

        private static void ThreadProc()
        {
            var name = Thread.CurrentThread.Name;

            Console.WriteLine(name + " starts and calls mre.WaitOne()");

            Mre.WaitOne();

            Console.WriteLine(name + " ends.");
        }
    }
}